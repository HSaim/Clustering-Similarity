

import java.util.List;
import java.util.Map;
import java.util.ArrayList;
import java.util.Arrays;

//for external cluster validation
public class ClusterValidation {
	
	private static List<List<Integer>> humanClusters; 	//human clustering hard coded for validation
	private static List<List<Integer>> machineClusters;		//clusters generated by the algorithm
	private static int[][] clusterObjCount;				// 2D array to keep count of human clustered objects in each machine cluster
	private static String[] clusterName;
	private static List<List<String>> methodsTags;
	
	public static void runClusterValidation(List<List<Integer>> clusters, List<List<String>> mTags){
		machineClusters = clusters;
		methodsTags = mTags;
		populateHumanClusters();
		setClusterObjCount();
		printClusterDetails();
		getPurity();
		
		
	}
	
	private static void setClusterObjCount(){
		List<Integer> methodsIDs;
		clusterObjCount = new int[machineClusters.size()][humanClusters.size()];
		for(int i=0; i<machineClusters.size(); i++){
			for(int Clus : machineClusters.get(i)){
				for(int j=0; j<humanClusters.size(); j++){
					if(humanClusters.get(j).contains(Clus)){
						clusterObjCount[i][j] ++;
					}
				}
			}
		}
		printCount();
	}
	
	private static void printCount(){
		int x = machineClusters.size();
		int y = humanClusters.size();
		for(int i=0; i<x; i++){
			for(int j=0; j<y; j++){
				System.out.print(clusterObjCount[i][j] + ", ");
			}
			System.out.println();
		}
	}
	
	
	private static void getPrecision(){
		
	}
	
//	private static void getEntropy(){
//	}	
	private static void getPurity(){
		int x = machineClusters.size();
		int y = humanClusters.size();
		int Max = 0, denom = 0, nume = 0;
		for(int i=0; i<x; i++){
			Max = 0;
			for(int j=0; j<y; j++){
				denom += clusterObjCount[i][j];
				Max = Math.max(Max,clusterObjCount[i][j]);
			}
			nume += Max;
		}
		System.out.println("Purity: "+ (float)nume/denom);
	}
	
	private static void printClusterDetails(){
//		Map<Integer,String> projectDict = CSVReader.projectDict;
		for(int i=0; i<machineClusters.size(); i++){
			System.out.println("Cluster Number "+i);
			for(int j=0; j<humanClusters.size(); j++){
				System.out.println("---------Human Cluster: " + j + " "+ clusterName[j]+"-------");
				for(int clus: machineClusters.get(i)){
					if(humanClusters.get(j).contains(clus)){
						System.out.println(clus + " "+ methodsTags.get(clus));
					}
				}
				System.out.println();
			}	
		}
	}
	
	private static void populateHumanClusters(){	
		humanClusters = new ArrayList<List<Integer>>();
		clusterName = new String[]{"Action","Not a Game","Board Game"};
		//boardGames
		humanClusters.add(Arrays.asList(9,10,14,25,29,30,35));
		//RPG Action
		humanClusters.add(Arrays.asList(13,15,17,19,24,26,27,31,32,33,36));
		//Card Games
		humanClusters.add(Arrays.asList(0,1,2,3,4,5,6,7,8,11,12,16,18,20,21,22,23,28,34,37));
		
	}
	
	
}
